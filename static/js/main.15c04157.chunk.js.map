{"version":3,"sources":["store.js","storeApi.js","useWeb3.js","img/Eth.png","App.js","index.js"],"names":["StoreContext","createContext","initialState","message","balance","address","reducer","state","action","type","Error","StoreProvider","children","useReducer","dispatch","Provider","value","useStoreApi","useContext","setAddress","newAddress","setBalance","newBalance","useWeb3","useState","web3","setWeb3","useEffect","instance","window","ethereum","Web3","error","console","App","getUserAccount","a","enable","eth","getAccounts","then","accounts","alert","className","src","EthLogo","alt","onClick","variant","color","class","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6pBAEMA,EAAeC,0BACfC,EAAe,CACnBC,QAAS,GACTC,QAAS,EACTC,QAAS,MAGLC,EAAU,SAACC,EAAOC,GACtB,OAAQA,EAAOC,MACb,IAAK,cACH,OAAO,2BACFF,GADL,IAEEF,QAASG,EAAOH,QAChBF,QAASK,EAAOL,UAEpB,IAAK,cACH,OAAO,2BACFI,GADL,IAEEH,QAASI,EAAOJ,UAEpB,QACE,MAAM,IAAIM,MAAJ,kCAAqCF,EAAOC,SAI3CE,EAAgB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAC9B,EAA0BC,qBAAWP,EAASJ,GAA9C,mBAAOK,EAAP,KAAcO,EAAd,KAEA,OACE,cAACd,EAAae,SAAd,CAAuBC,MAAO,CAAET,QAAOO,YAAvC,SACGF,KC9BMK,EAAc,WACzB,MDkC4BC,qBAAWlB,GClC/BO,EAAR,EAAQA,MAAOO,EAAf,EAAeA,SAEf,MAAO,CACLV,QAASG,EAAMH,QACfC,QAASE,EAAMF,QACfF,QAASI,EAAMJ,QACfgB,WAAY,SAAAC,GACVN,EAAS,CACPL,KAAM,cACNJ,QAASe,KAIbC,WAAY,SAAAC,GACVR,EAAS,CACPL,KAAM,cACNL,QAASkB,O,kBCQFC,EAxBC,WACd,MAAwBC,mBAAS,MAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAoBA,OAlBAC,qBAAU,WACR,IAAIC,EACJ,GAAIC,OAAOC,SAET,IACEF,EAAW,IAAIG,IAAKF,OAAOC,UAC3B,MAAOE,GACPC,QAAQD,MAAMA,QAEPH,OAAOJ,OAChBG,EAAW,IAAIG,IAAKF,OAAOJ,OAM7BC,EAAQE,KACP,IACIH,GCxBM,G,OAAA,IAA0B,iCC6D1BS,MAtDf,WACE,MAAoDjB,IAA5Cb,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,QAASF,EAA1B,EAA0BA,QAASgB,EAAnC,EAAmCA,WAC7BM,EAAOF,IAGPY,EAAc,uCAAG,sBAAAC,EAAA,0DACjBP,OAAOC,SADU,0CAGXD,OAAOC,SAASO,SAHL,OAIjBZ,EAAKa,IAAIC,cAAcC,MAAK,SAAAC,GAC1BtB,EAAWsB,EAAS,OALL,gDASjBR,QAAQD,MAAR,MATiB,gCAYnBU,MAAM,sCAZa,yDAAH,qDAiBpB,OACE,qBAAKC,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,qBAAKC,IAAKC,EAASF,UAAU,WAAWG,IAAI,SAC5C,sBAICzC,EACC,qCACE,8CAAiBA,KACjB,yCAAYD,EAAZ,UAEA,KACJ,wBACE2C,QAAS,kBAAMZ,KACfa,QAAQ,WACRC,MAAM,UACNC,MAAM,SAJR,yCAQC/C,EACC,4BACE,+BAAOA,MAEP,WCjDZgD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.15c04157.chunk.js","sourcesContent":["import React, { useReducer, useContext, createContext } from \"react\";\n\nconst StoreContext = createContext();\nconst initialState = {\n  message: \"\",\n  balance: 0,\n  address: null\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"NEW-ADDRESS\":\n      return {\n        ...state,\n        address: action.address,\n        message: action.message\n      };\n    case \"SET-BALANCE\":\n      return {\n        ...state,\n        balance: action.balance\n      };\n    default:\n      throw new Error(`Unknown type of action: ${action.type}`);\n  }\n};\n\nexport const StoreProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  return (\n    <StoreContext.Provider value={{ state, dispatch }}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport const useStore = () => useContext(StoreContext);\n","import { useStore } from \"./store\";\n\nexport const useStoreApi = () => {\n  const { state, dispatch } = useStore();\n\n  return {\n    balance: state.balance,\n    address: state.address,\n    message: state.message,\n    setAddress: newAddress => {\n      dispatch({\n        type: \"NEW-ADDRESS\",\n        address: newAddress,\n        \n      });\n    },\n    setBalance: newBalance => {\n      dispatch({\n        type: \"SET-BALANCE\",\n        balance: newBalance\n      });\n    }\n  };\n};\n","import { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\n\nconst useWeb3 = () => {\n  const [web3, setWeb3] = useState(null);\n\n  useEffect(() => {\n    var instance;\n    if (window.ethereum) {\n      // set up a new provider\n      try {\n        instance = new Web3(window.ethereum);\n      } catch (error) {\n        console.error(error);\n      }\n    } else if (window.web3) {\n      instance = new Web3(window.web3);\n    } else {\n      // fallback on localhost provider\n     // const provider = new Web3.provider.HttpProvider(\"http://127.0.0.1:7545\");\n    //  instance = new Web3(provider);\n    }\n    setWeb3(instance);\n  }, []);\n  return web3;\n};\n\nexport default useWeb3;\n","export default __webpack_public_path__ + \"static/media/Eth.4aa4d7e0.png\";","import { useStoreApi } from \"./storeApi\";\nimport useWeb3 from \"./useWeb3\";\n\n\nimport \"./App.css\";\nimport EthLogo from \"./img/Eth.png\";\n\nfunction App() {\n  const { balance, address, message, setAddress,  } = useStoreApi();\n  const web3 = useWeb3();\n\n  // get user account on button click\n  const getUserAccount = async () => {\n    if (window.ethereum) {\n      try {\n        await window.ethereum.enable();\n        web3.eth.getAccounts().then(accounts => {\n          setAddress(accounts[0]);\n       \n        });\n      } catch (error) {\n        console.error(error);\n      }\n    } else {\n      alert(\"Nie wykryto rozszerzenia MetaMask!\");\n    }\n  };\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={EthLogo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n\n        </p>\n        \n        {address ? (\n          <>\n            <p> Adres konta {address}</p>\n            <p> Saldo: {balance} </p>\n          </>\n        ) : null}\n        <button\n          onClick={() => getUserAccount()}\n          variant=\"outlined\"\n          color=\"primary\"\n          class=\"button\"\n        >\n         Połącz z MetaMask\n        </button>\n        {message ? (\n          <p>\n            <code>{message}</code>\n          </p>\n        ) : null}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { StoreProvider } from \"./store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <StoreProvider>\n      <App />\n    </StoreProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}